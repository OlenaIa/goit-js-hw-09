{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAoDA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,aAAUC,IAGnBG,EAAO,C,SAACJ,E,aAAUC,GAAc,GAGjCA,EAAa,G,CA7DJQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAqBC,GACnBA,EAAMC,iBAEN,MAAQC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IAAYL,EAAMM,cAC7CC,EAAW,CACfJ,MAAOK,OAAOL,EAAMM,OACpBL,KAAMI,OAAOJ,EAAKK,OAClBJ,OAAQG,OAAOH,EAAOI,QAGxB,GAAIF,EAASJ,MAAQ,GAAKI,EAASH,KAAO,GAAKG,EAASF,OAAS,EAC/D,OAAOpB,EAAAyB,OAAOC,QAAQ,gCAAiC,CACrDC,MAAO,QACPxB,SAAU,gBACVyB,SAAU,OACVC,cAAc,IAIlB,IAAIC,EAAeR,EAASJ,MAC5B,IAAK,IAAIa,EAAW,EAAGA,GAAYT,EAASF,OAAQW,IAClD7B,EAAc6B,EAAUD,GACrBE,MAAK,EAAC7B,SAAEA,EAAQC,aAAEA,MACjBJ,EAAAyB,OAAOQ,QAAQ,uBAAqB9B,QAAiBC,MAAkB,CACnEuB,MAAK,QACPO,QAAS,IACT/B,SAAU,gBACVyB,SAAU,OACVC,cAAc,GACd,IAEHM,OAAM,EAAChC,SAACA,EAAQC,aAAEA,MACjBJ,EAAAyB,OAAOC,QAAQ,sBAAoBvB,QAAeC,MAAkB,CAClEuB,MAAO,QACPO,QAAS,IACT/B,SAAU,gBACVyB,SAAU,OACVC,cAAc,GACd,IAENC,GAAgBR,EAASH,KAG3BJ,EAAMM,cAAce,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onBtnSubmit);\n\nfunction onBtnSubmit(event) {\n  event.preventDefault();\n\n  const { elements: { delay, step, amount} } = event.currentTarget;\n  const dataForm = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value)\n  };\n\n  if (dataForm.delay < 0 || dataForm.step < 0 || dataForm.amount < 0) {\n    return Notify.failure('Please, enter positive values', {\n      width: '400px',\n      position: 'center-center',\n      fontSize: '28px',\n      clickToClose: true\n    });\n  };\n\n  let delayPromise = dataForm.delay;\n  for (let position = 1; position <= dataForm.amount; position++) {\n    createPromise(position, delayPromise)\n      .then(({ position, delayPromise }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delayPromise}ms`, {\n          width: '400px',\n          timeout: 4000,\n          position: 'center-center',\n          fontSize: '28px',\n          clickToClose: true\n        });\n      })\n      .catch(({position, delayPromise}) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delayPromise}ms`, {\n          width: '400px',\n          timeout: 4000,\n          position: 'center-center',\n          fontSize: '28px',\n          clickToClose: true\n        });\n      });\n    delayPromise += dataForm.step;\n  };   \n\n  event.currentTarget.reset();\n};\n\nfunction createPromise(position, delayPromise) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delayPromise})\n        // Fulfill\n      } else {\n        reject({position, delayPromise})\n        // Reject\n      }\n    }, delayPromise)\n  }); \n};\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delayPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","dataForm","Number","value","Notify","failure","width","fontSize","clickToClose","delayPromise1","position1","then","success","timeout","catch","reset"],"version":3,"file":"03-promises.fe54501b.js.map"}